// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\m2907\GolandProjects\VK_Education_Go\2024_1_commandName\internal\auth\usecase\auth_usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	domain "ProjectMessenger/domain"
	context "context"
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionStore is a mock of SessionStore interface.
type MockSessionStore struct {
	ctrl     *gomock.Controller
	recorder *MockSessionStoreMockRecorder
}

// MockSessionStoreMockRecorder is the mock recorder for MockSessionStore.
type MockSessionStoreMockRecorder struct {
	mock *MockSessionStore
}

// NewMockSessionStore creates a new mock instance.
func NewMockSessionStore(ctrl *gomock.Controller) *MockSessionStore {
	mock := &MockSessionStore{ctrl: ctrl}
	mock.recorder = &MockSessionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionStore) EXPECT() *MockSessionStoreMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockSessionStore) CreateSession(ctx context.Context, userID uint) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, userID)
	ret0, _ := ret[0].(string)
	return ret0
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockSessionStoreMockRecorder) CreateSession(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockSessionStore)(nil).CreateSession), ctx, userID)
}

// DeleteSession mocks base method.
func (m *MockSessionStore) DeleteSession(ctx context.Context, sessionID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteSession", ctx, sessionID)
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockSessionStoreMockRecorder) DeleteSession(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockSessionStore)(nil).DeleteSession), ctx, sessionID)
}

// GetUserIDbySessionID mocks base method.
func (m *MockSessionStore) GetUserIDbySessionID(ctx context.Context, sessionID string) (uint, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDbySessionID", ctx, sessionID)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetUserIDbySessionID indicates an expected call of GetUserIDbySessionID.
func (mr *MockSessionStoreMockRecorder) GetUserIDbySessionID(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDbySessionID", reflect.TypeOf((*MockSessionStore)(nil).GetUserIDbySessionID), ctx, sessionID)
}

// MockUserStore is a mock of UserStore interface.
type MockUserStore struct {
	ctrl     *gomock.Controller
	recorder *MockUserStoreMockRecorder
}

// MockUserStoreMockRecorder is the mock recorder for MockUserStore.
type MockUserStoreMockRecorder struct {
	mock *MockUserStore
}

// NewMockUserStore creates a new mock instance.
func NewMockUserStore(ctrl *gomock.Controller) *MockUserStore {
	mock := &MockUserStore{ctrl: ctrl}
	mock.recorder = &MockUserStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStore) EXPECT() *MockUserStoreMockRecorder {
	return m.recorder
}

// AddContact mocks base method.
func (m *MockUserStore) AddContact(ctx context.Context, userID1, userID2 uint) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContact", ctx, userID1, userID2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AddContact indicates an expected call of AddContact.
func (mr *MockUserStoreMockRecorder) AddContact(ctx, userID1, userID2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContact", reflect.TypeOf((*MockUserStore)(nil).AddContact), ctx, userID1, userID2)
}

// CreateUser mocks base method.
func (m *MockUserStore) CreateUser(ctx context.Context, user domain.Person) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserStoreMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserStore)(nil).CreateUser), ctx, user)
}

// GetAllUserIDs mocks base method.
func (m *MockUserStore) GetAllUserIDs(ctx context.Context) []uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserIDs", ctx)
	ret0, _ := ret[0].([]uint)
	return ret0
}

// GetAllUserIDs indicates an expected call of GetAllUserIDs.
func (mr *MockUserStoreMockRecorder) GetAllUserIDs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserIDs", reflect.TypeOf((*MockUserStore)(nil).GetAllUserIDs), ctx)
}

// GetAvatarStoragePath mocks base method.
func (m *MockUserStore) GetAvatarStoragePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvatarStoragePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAvatarStoragePath indicates an expected call of GetAvatarStoragePath.
func (mr *MockUserStoreMockRecorder) GetAvatarStoragePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatarStoragePath", reflect.TypeOf((*MockUserStore)(nil).GetAvatarStoragePath))
}

// GetByUserID mocks base method.
func (m *MockUserStore) GetByUserID(ctx context.Context, userID uint) (domain.Person, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID)
	ret0, _ := ret[0].(domain.Person)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockUserStoreMockRecorder) GetByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockUserStore)(nil).GetByUserID), ctx, userID)
}

// GetByUsername mocks base method.
func (m *MockUserStore) GetByUsername(ctx context.Context, username string) (domain.Person, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", ctx, username)
	ret0, _ := ret[0].(domain.Person)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockUserStoreMockRecorder) GetByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockUserStore)(nil).GetByUsername), ctx, username)
}

// GetContacts mocks base method.
func (m *MockUserStore) GetContacts(ctx context.Context, userID uint) []domain.Person {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContacts", ctx, userID)
	ret0, _ := ret[0].([]domain.Person)
	return ret0
}

// GetContacts indicates an expected call of GetContacts.
func (mr *MockUserStoreMockRecorder) GetContacts(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContacts", reflect.TypeOf((*MockUserStore)(nil).GetContacts), ctx, userID)
}

// StoreAvatar mocks base method.
func (m *MockUserStore) StoreAvatar(ctx context.Context, multipartFile multipart.File, fileHandler *multipart.FileHeader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreAvatar", ctx, multipartFile, fileHandler)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreAvatar indicates an expected call of StoreAvatar.
func (mr *MockUserStoreMockRecorder) StoreAvatar(ctx, multipartFile, fileHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAvatar", reflect.TypeOf((*MockUserStore)(nil).StoreAvatar), ctx, multipartFile, fileHandler)
}

// UpdateUser mocks base method.
func (m *MockUserStore) UpdateUser(ctx context.Context, userUpdated domain.Person) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, userUpdated)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserStoreMockRecorder) UpdateUser(ctx, userUpdated interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserStore)(nil).UpdateUser), ctx, userUpdated)
}
