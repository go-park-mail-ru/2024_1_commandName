// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/checkAuth": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "checks that user is authenticated",
                "operationId": "checkAuth",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Response-int"
                        }
                    },
                    "401": {
                        "description": "Person not authorized",
                        "schema": {
                            "$ref": "#/definitions/models.Response-models_Error"
                        }
                    }
                }
            }
        },
        "/getChats": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "gets chats previews for user",
                "operationId": "GetChats",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Response-models_Chats"
                        }
                    },
                    "400": {
                        "description": "Person not authorized",
                        "schema": {
                            "$ref": "#/definitions/models.Response-models_Error"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "logs user in",
                "operationId": "login",
                "parameters": [
                    {
                        "description": "Person",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Person"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Response-int"
                        }
                    },
                    "400": {
                        "description": "wrong json structure | user not found | wrong password",
                        "schema": {
                            "$ref": "#/definitions/models.Response-models_Error"
                        }
                    },
                    "405": {
                        "description": "use POST",
                        "schema": {
                            "$ref": "#/definitions/models.Response-models_Error"
                        }
                    }
                }
            }
        },
        "/logout": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "logs user out",
                "operationId": "logout",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Response-int"
                        }
                    },
                    "400": {
                        "description": "no session to logout",
                        "schema": {
                            "$ref": "#/definitions/models.Response-models_Error"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "registers user",
                "operationId": "register",
                "parameters": [
                    {
                        "description": "Person",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Person"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Response-int"
                        }
                    },
                    "400": {
                        "description": "user already exists | required field empty | wrong json structure",
                        "schema": {
                            "$ref": "#/definitions/models.Response-models_Error"
                        }
                    },
                    "405": {
                        "description": "use POST",
                        "schema": {
                            "$ref": "#/definitions/models.Response-models_Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Chat": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Message"
                    }
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ChatUser"
                    }
                }
            }
        },
        "models.ChatUser": {
            "type": "object",
            "properties": {
                "chat_id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "models.Chats": {
            "type": "object",
            "properties": {
                "chats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Chat"
                    }
                }
            }
        },
        "models.Error": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "error description"
                }
            }
        },
        "models.Message": {
            "type": "object",
            "properties": {
                "chat_id": {
                    "type": "integer"
                },
                "edited": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "message_text": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "models.Person": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.Response-int": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "integer"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "models.Response-models_Chats": {
            "type": "object",
            "properties": {
                "body": {
                    "$ref": "#/definitions/models.Chats"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "models.Response-models_Error": {
            "type": "object",
            "properties": {
                "body": {
                    "$ref": "#/definitions/models.Error"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Messenger authorization API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
