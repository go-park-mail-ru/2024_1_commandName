// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: sessions.proto

package sessions

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthChecker_CheckAuthorizedRPC_FullMethodName = "/sessions.AuthChecker/CheckAuthorizedRPC"
	AuthChecker_CreateSessionRPC_FullMethodName   = "/sessions.AuthChecker/CreateSessionRPC"
	AuthChecker_LogoutUserRPC_FullMethodName      = "/sessions.AuthChecker/LogoutUserRPC"
)

// AuthCheckerClient is the client API for AuthChecker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthCheckerClient interface {
	CheckAuthorizedRPC(ctx context.Context, in *Session, opts ...grpc.CallOption) (*UserFound, error)
	CreateSessionRPC(ctx context.Context, in *User, opts ...grpc.CallOption) (*Session, error)
	LogoutUserRPC(ctx context.Context, in *Session, opts ...grpc.CallOption) (*ResultBool, error)
}

type authCheckerClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthCheckerClient(cc grpc.ClientConnInterface) AuthCheckerClient {
	return &authCheckerClient{cc}
}

func (c *authCheckerClient) CheckAuthorizedRPC(ctx context.Context, in *Session, opts ...grpc.CallOption) (*UserFound, error) {
	out := new(UserFound)
	err := c.cc.Invoke(ctx, AuthChecker_CheckAuthorizedRPC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authCheckerClient) CreateSessionRPC(ctx context.Context, in *User, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, AuthChecker_CreateSessionRPC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authCheckerClient) LogoutUserRPC(ctx context.Context, in *Session, opts ...grpc.CallOption) (*ResultBool, error) {
	out := new(ResultBool)
	err := c.cc.Invoke(ctx, AuthChecker_LogoutUserRPC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthCheckerServer is the server API for AuthChecker service.
// All implementations must embed UnimplementedAuthCheckerServer
// for forward compatibility
type AuthCheckerServer interface {
	CheckAuthorizedRPC(context.Context, *Session) (*UserFound, error)
	CreateSessionRPC(context.Context, *User) (*Session, error)
	LogoutUserRPC(context.Context, *Session) (*ResultBool, error)
	mustEmbedUnimplementedAuthCheckerServer()
}

// UnimplementedAuthCheckerServer must be embedded to have forward compatible implementations.
type UnimplementedAuthCheckerServer struct {
}

func (UnimplementedAuthCheckerServer) CheckAuthorizedRPC(context.Context, *Session) (*UserFound, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAuthorizedRPC not implemented")
}
func (UnimplementedAuthCheckerServer) CreateSessionRPC(context.Context, *User) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSessionRPC not implemented")
}
func (UnimplementedAuthCheckerServer) LogoutUserRPC(context.Context, *Session) (*ResultBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutUserRPC not implemented")
}
func (UnimplementedAuthCheckerServer) mustEmbedUnimplementedAuthCheckerServer() {}

// UnsafeAuthCheckerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthCheckerServer will
// result in compilation errors.
type UnsafeAuthCheckerServer interface {
	mustEmbedUnimplementedAuthCheckerServer()
}

func RegisterAuthCheckerServer(s grpc.ServiceRegistrar, srv AuthCheckerServer) {
	s.RegisterService(&AuthChecker_ServiceDesc, srv)
}

func _AuthChecker_CheckAuthorizedRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthCheckerServer).CheckAuthorizedRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthChecker_CheckAuthorizedRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthCheckerServer).CheckAuthorizedRPC(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthChecker_CreateSessionRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthCheckerServer).CreateSessionRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthChecker_CreateSessionRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthCheckerServer).CreateSessionRPC(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthChecker_LogoutUserRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthCheckerServer).LogoutUserRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthChecker_LogoutUserRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthCheckerServer).LogoutUserRPC(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthChecker_ServiceDesc is the grpc.ServiceDesc for AuthChecker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthChecker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sessions.AuthChecker",
	HandlerType: (*AuthCheckerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAuthorizedRPC",
			Handler:    _AuthChecker_CheckAuthorizedRPC_Handler,
		},
		{
			MethodName: "CreateSessionRPC",
			Handler:    _AuthChecker_CreateSessionRPC_Handler,
		},
		{
			MethodName: "LogoutUserRPC",
			Handler:    _AuthChecker_LogoutUserRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sessions.proto",
}
