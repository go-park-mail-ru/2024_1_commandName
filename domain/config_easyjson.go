// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6615c02eDecodeProjectMessengerDomain(in *jlexer.Lexer, out *YandexConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TranslateKey":
			out.TranslateKey = string(in.String())
		case "FolderID":
			out.FolderID = string(in.String())
		case "Url":
			out.Url = string(in.String())
		case "Method":
			out.Method = string(in.String())
		case "Header":
			out.Header = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeProjectMessengerDomain(out *jwriter.Writer, in YandexConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TranslateKey\":"
		out.RawString(prefix[1:])
		out.String(string(in.TranslateKey))
	}
	{
		const prefix string = ",\"FolderID\":"
		out.RawString(prefix)
		out.String(string(in.FolderID))
	}
	{
		const prefix string = ",\"Url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"Method\":"
		out.RawString(prefix)
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"Header\":"
		out.RawString(prefix)
		out.String(string(in.Header))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v YandexConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeProjectMessengerDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v YandexConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeProjectMessengerDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *YandexConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeProjectMessengerDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *YandexConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeProjectMessengerDomain(l, v)
}
func easyjson6615c02eDecodeProjectMessengerDomain1(in *jlexer.Lexer, out *Config) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Server":
			easyjson6615c02eDecode(in, &out.Server)
		case "App":
			easyjson6615c02eDecode1(in, &out.App)
		case "Yandex":
			easyjson6615c02eDecode2(in, &out.Yandex)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeProjectMessengerDomain1(out *jwriter.Writer, in Config) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Server\":"
		out.RawString(prefix[1:])
		easyjson6615c02eEncode(out, in.Server)
	}
	{
		const prefix string = ",\"App\":"
		out.RawString(prefix)
		easyjson6615c02eEncode1(out, in.App)
	}
	{
		const prefix string = ",\"Yandex\":"
		out.RawString(prefix)
		easyjson6615c02eEncode2(out, in.Yandex)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Config) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeProjectMessengerDomain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Config) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeProjectMessengerDomain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Config) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeProjectMessengerDomain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Config) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeProjectMessengerDomain1(l, v)
}
func easyjson6615c02eDecode2(in *jlexer.Lexer, out *struct {
	TranslateKey string `yaml:"trKey"`
	Url          string `yaml:"url"`
	FolderID     string `yaml:"folderId"`
	Header       string `yaml:"header"`
	Method       string `yaml:"method"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TranslateKey":
			out.TranslateKey = string(in.String())
		case "Url":
			out.Url = string(in.String())
		case "FolderID":
			out.FolderID = string(in.String())
		case "Header":
			out.Header = string(in.String())
		case "Method":
			out.Method = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncode2(out *jwriter.Writer, in struct {
	TranslateKey string `yaml:"trKey"`
	Url          string `yaml:"url"`
	FolderID     string `yaml:"folderId"`
	Header       string `yaml:"header"`
	Method       string `yaml:"method"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TranslateKey\":"
		out.RawString(prefix[1:])
		out.String(string(in.TranslateKey))
	}
	{
		const prefix string = ",\"Url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"FolderID\":"
		out.RawString(prefix)
		out.String(string(in.FolderID))
	}
	{
		const prefix string = ",\"Header\":"
		out.RawString(prefix)
		out.String(string(in.Header))
	}
	{
		const prefix string = ",\"Method\":"
		out.RawString(prefix)
		out.String(string(in.Method))
	}
	out.RawByte('}')
}
func easyjson6615c02eDecode1(in *jlexer.Lexer, out *struct {
	IsDebug    bool   `yaml:"isDebug"`
	InMemory   bool   `yaml:"inMemory"`
	AvatarPath string `yaml:"avatarPath"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "IsDebug":
			out.IsDebug = bool(in.Bool())
		case "InMemory":
			out.InMemory = bool(in.Bool())
		case "AvatarPath":
			out.AvatarPath = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncode1(out *jwriter.Writer, in struct {
	IsDebug    bool   `yaml:"isDebug"`
	InMemory   bool   `yaml:"inMemory"`
	AvatarPath string `yaml:"avatarPath"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"IsDebug\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.IsDebug))
	}
	{
		const prefix string = ",\"InMemory\":"
		out.RawString(prefix)
		out.Bool(bool(in.InMemory))
	}
	{
		const prefix string = ",\"AvatarPath\":"
		out.RawString(prefix)
		out.String(string(in.AvatarPath))
	}
	out.RawByte('}')
}
func easyjson6615c02eDecode(in *jlexer.Lexer, out *struct {
	Host string `yaml:"host"`
	Port int    `yaml:"port"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Host":
			out.Host = string(in.String())
		case "Port":
			out.Port = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncode(out *jwriter.Writer, in struct {
	Host string `yaml:"host"`
	Port int    `yaml:"port"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Host\":"
		out.RawString(prefix[1:])
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"Port\":"
		out.RawString(prefix)
		out.Int(int(in.Port))
	}
	out.RawByte('}')
}
