// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4086215fDecodeProjectMessengerDomain(in *jlexer.Lexer, out *StickerFromUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sticker_id":
			out.StickerID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeProjectMessengerDomain(out *jwriter.Writer, in StickerFromUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sticker_id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.StickerID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StickerFromUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeProjectMessengerDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StickerFromUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeProjectMessengerDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StickerFromUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeProjectMessengerDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StickerFromUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeProjectMessengerDomain(l, v)
}
func easyjson4086215fDecodeProjectMessengerDomain1(in *jlexer.Lexer, out *Sticker) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sticker_id":
			out.StickerID = int(in.Int())
		case "sticker_desc":
			out.StickerDesc = string(in.String())
		case "sticker_type":
			out.StickerType = string(in.String())
		case "sticker_path":
			out.StickerPath = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeProjectMessengerDomain1(out *jwriter.Writer, in Sticker) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sticker_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.StickerID))
	}
	{
		const prefix string = ",\"sticker_desc\":"
		out.RawString(prefix)
		out.String(string(in.StickerDesc))
	}
	{
		const prefix string = ",\"sticker_type\":"
		out.RawString(prefix)
		out.String(string(in.StickerType))
	}
	{
		const prefix string = ",\"sticker_path\":"
		out.RawString(prefix)
		out.String(string(in.StickerPath))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Sticker) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeProjectMessengerDomain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Sticker) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeProjectMessengerDomain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Sticker) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeProjectMessengerDomain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Sticker) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeProjectMessengerDomain1(l, v)
}
func easyjson4086215fDecodeProjectMessengerDomain2(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint(in.Uint())
		case "chat_id":
			out.ChatID = uint(in.Uint())
		case "user_id":
			out.UserID = uint(in.Uint())
		case "message_text":
			out.Message = string(in.String())
		case "edited":
			out.Edited = bool(in.Bool())
		case "edited_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EditedAt).UnmarshalJSON(data))
			}
		case "sent_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "username":
			out.SenderUsername = string(in.String())
		case "file":
			if in.IsNull() {
				in.Skip()
				out.File = nil
			} else {
				if out.File == nil {
					out.File = new(FileInMessage)
				}
				(*out.File).UnmarshalEasyJSON(in)
			}
		case "sticker_path":
			out.StickerPath = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeProjectMessengerDomain2(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"chat_id\":"
		out.RawString(prefix)
		out.Uint(uint(in.ChatID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Uint(uint(in.UserID))
	}
	{
		const prefix string = ",\"message_text\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"edited\":"
		out.RawString(prefix)
		out.Bool(bool(in.Edited))
	}
	{
		const prefix string = ",\"edited_at\":"
		out.RawString(prefix)
		out.Raw((in.EditedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"sent_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.SenderUsername))
	}
	{
		const prefix string = ",\"file\":"
		out.RawString(prefix)
		if in.File == nil {
			out.RawString("null")
		} else {
			(*in.File).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"sticker_path\":"
		out.RawString(prefix)
		out.String(string(in.StickerPath))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeProjectMessengerDomain2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeProjectMessengerDomain2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeProjectMessengerDomain2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeProjectMessengerDomain2(l, v)
}
func easyjson4086215fDecodeProjectMessengerDomain3(in *jlexer.Lexer, out *FileInMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "original_name":
			out.OriginalName = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeProjectMessengerDomain3(out *jwriter.Writer, in FileInMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"original_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.OriginalName))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FileInMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeProjectMessengerDomain3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileInMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeProjectMessengerDomain3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FileInMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeProjectMessengerDomain3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileInMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeProjectMessengerDomain3(l, v)
}
func easyjson4086215fDecodeProjectMessengerDomain4(in *jlexer.Lexer, out *FileFromUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message_text":
			out.MessageText = string(in.String())
		case "MessageID":
			out.MessageID = uint(in.Uint())
		case "chat_id":
			out.ChatID = uint(in.Uint())
		case "type":
			out.AttachmentType = string(in.String())
		case "file_id":
			out.FileID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeProjectMessengerDomain4(out *jwriter.Writer, in FileFromUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message_text\":"
		out.RawString(prefix[1:])
		out.String(string(in.MessageText))
	}
	{
		const prefix string = ",\"MessageID\":"
		out.RawString(prefix)
		out.Uint(uint(in.MessageID))
	}
	{
		const prefix string = ",\"chat_id\":"
		out.RawString(prefix)
		out.Uint(uint(in.ChatID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.AttachmentType))
	}
	{
		const prefix string = ",\"file_id\":"
		out.RawString(prefix)
		out.Uint(uint(in.FileID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FileFromUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeProjectMessengerDomain4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileFromUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeProjectMessengerDomain4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FileFromUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeProjectMessengerDomain4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileFromUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeProjectMessengerDomain4(l, v)
}
