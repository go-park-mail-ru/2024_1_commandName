// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package delivery

import (
	domain "ProjectMessenger/domain"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	prometheus "github.com/prometheus/client_golang/prometheus"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery(in *jlexer.Lexer, out *userIDJson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.ID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery(out *jwriter.Writer, in userIDJson) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v userIDJson) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v userIDJson) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *userIDJson) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *userIDJson) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery(l, v)
}
func easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery1(in *jlexer.Lexer, out *updateChatJson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			out.ChatID = uint(in.Uint())
		case "new_name":
			if in.IsNull() {
				in.Skip()
				out.NewName = nil
			} else {
				if out.NewName == nil {
					out.NewName = new(string)
				}
				*out.NewName = string(in.String())
			}
		case "new_description":
			if in.IsNull() {
				in.Skip()
				out.NewDescription = nil
			} else {
				if out.NewDescription == nil {
					out.NewDescription = new(string)
				}
				*out.NewDescription = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery1(out *jwriter.Writer, in updateChatJson) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat_id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ChatID))
	}
	{
		const prefix string = ",\"new_name\":"
		out.RawString(prefix)
		if in.NewName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.NewName))
		}
	}
	{
		const prefix string = ",\"new_description\":"
		out.RawString(prefix)
		if in.NewDescription == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.NewDescription))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v updateChatJson) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v updateChatJson) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *updateChatJson) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *updateChatJson) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery1(l, v)
}
func easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery2(in *jlexer.Lexer, out *messagesByChatIDRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			out.ChatID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery2(out *jwriter.Writer, in messagesByChatIDRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat_id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ChatID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v messagesByChatIDRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v messagesByChatIDRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *messagesByChatIDRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *messagesByChatIDRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery2(l, v)
}
func easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery3(in *jlexer.Lexer, out *getPopularChannelsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channels":
			if in.IsNull() {
				in.Skip()
				out.Channels = nil
			} else {
				in.Delim('[')
				if out.Channels == nil {
					if !in.IsDelim(']') {
						out.Channels = make([]domain.ChannelWithCounter, 0, 0)
					} else {
						out.Channels = []domain.ChannelWithCounter{}
					}
				} else {
					out.Channels = (out.Channels)[:0]
				}
				for !in.IsDelim(']') {
					var v1 domain.ChannelWithCounter
					(v1).UnmarshalEasyJSON(in)
					out.Channels = append(out.Channels, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery3(out *jwriter.Writer, in getPopularChannelsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channels\":"
		out.RawString(prefix[1:])
		if in.Channels == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Channels {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v getPopularChannelsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v getPopularChannelsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *getPopularChannelsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *getPopularChannelsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery3(l, v)
}
func easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery4(in *jlexer.Lexer, out *deleteChatJsonResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "successfully_deleted":
			out.SuccessfullyDeleted = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery4(out *jwriter.Writer, in deleteChatJsonResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"successfully_deleted\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.SuccessfullyDeleted))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v deleteChatJsonResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v deleteChatJsonResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *deleteChatJsonResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *deleteChatJsonResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery4(l, v)
}
func easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery5(in *jlexer.Lexer, out *createGroupJson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "group_name":
			out.GroupName = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "user_ids":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]uint, 0, 8)
					} else {
						out.Users = []uint{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v4 uint
					v4 = uint(in.Uint())
					out.Users = append(out.Users, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery5(out *jwriter.Writer, in createGroupJson) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"group_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.GroupName))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"user_ids\":"
		out.RawString(prefix)
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Users {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Uint(uint(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v createGroupJson) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v createGroupJson) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *createGroupJson) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *createGroupJson) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery5(l, v)
}
func easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery6(in *jlexer.Lexer, out *createChannelJson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery6(out *jwriter.Writer, in createChannelJson) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v createChannelJson) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v createChannelJson) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *createChannelJson) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *createChannelJson) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery6(l, v)
}
func easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery7(in *jlexer.Lexer, out *chatJsonResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat":
			(out.Chat).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery7(out *jwriter.Writer, in chatJsonResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat\":"
		out.RawString(prefix[1:])
		(in.Chat).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v chatJsonResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v chatJsonResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *chatJsonResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *chatJsonResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery7(l, v)
}
func easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery8(in *jlexer.Lexer, out *chatIDStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			out.ChatID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery8(out *jwriter.Writer, in chatIDStruct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat_id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ChatID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v chatIDStruct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v chatIDStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *chatIDStruct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *chatIDStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery8(l, v)
}
func easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery9(in *jlexer.Lexer, out *chatIDIsNewJsonResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			out.ChatID = uint(in.Uint())
		case "is_new_chat":
			out.IsNewChat = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery9(out *jwriter.Writer, in chatIDIsNewJsonResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat_id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ChatID))
	}
	{
		const prefix string = ",\"is_new_chat\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsNewChat))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v chatIDIsNewJsonResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v chatIDIsNewJsonResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *chatIDIsNewJsonResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *chatIDIsNewJsonResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery9(l, v)
}
func easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery10(in *jlexer.Lexer, out *PrometheusMetrics) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Hits":
			if in.IsNull() {
				in.Skip()
				out.Hits = nil
			} else {
				if out.Hits == nil {
					out.Hits = new(prometheus.CounterVec)
				}
				easyjson10234c4cDecodeGithubComPrometheusClientGolangPrometheus(in, out.Hits)
			}
		case "Errors":
			if in.IsNull() {
				in.Skip()
				out.Errors = nil
			} else {
				if out.Errors == nil {
					out.Errors = new(prometheus.CounterVec)
				}
				easyjson10234c4cDecodeGithubComPrometheusClientGolangPrometheus(in, out.Errors)
			}
		case "Methods":
			if in.IsNull() {
				in.Skip()
				out.Methods = nil
			} else {
				if out.Methods == nil {
					out.Methods = new(prometheus.CounterVec)
				}
				easyjson10234c4cDecodeGithubComPrometheusClientGolangPrometheus(in, out.Methods)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery10(out *jwriter.Writer, in PrometheusMetrics) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Hits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Hits == nil {
			out.RawString("null")
		} else {
			easyjson10234c4cEncodeGithubComPrometheusClientGolangPrometheus(out, *in.Hits)
		}
	}
	{
		const prefix string = ",\"Errors\":"
		out.RawString(prefix)
		if in.Errors == nil {
			out.RawString("null")
		} else {
			easyjson10234c4cEncodeGithubComPrometheusClientGolangPrometheus(out, *in.Errors)
		}
	}
	{
		const prefix string = ",\"Methods\":"
		out.RawString(prefix)
		if in.Methods == nil {
			out.RawString("null")
		} else {
			easyjson10234c4cEncodeGithubComPrometheusClientGolangPrometheus(out, *in.Methods)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PrometheusMetrics) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PrometheusMetrics) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PrometheusMetrics) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PrometheusMetrics) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery10(l, v)
}
func easyjson10234c4cDecodeGithubComPrometheusClientGolangPrometheus(in *jlexer.Lexer, out *prometheus.CounterVec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.MetricVec = new(prometheus.MetricVec)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson10234c4cEncodeGithubComPrometheusClientGolangPrometheus(out *jwriter.Writer, in prometheus.CounterVec) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery11(in *jlexer.Lexer, out *ChatsHandler) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery11(out *jwriter.Writer, in ChatsHandler) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatsHandler) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatsHandler) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson10234c4cEncodeProjectMessengerInternalChatsDelivery11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatsHandler) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatsHandler) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson10234c4cDecodeProjectMessengerInternalChatsDelivery11(l, v)
}
