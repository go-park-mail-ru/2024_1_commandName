// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: chats.proto

package chats

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatService_GetChatByChatID_FullMethodName        = "/chats.ChatService/GetChatByChatID"
	ChatService_GetChatsForUser_FullMethodName        = "/chats.ChatService/GetChatsForUser"
	ChatService_CheckUserBelongsToChat_FullMethodName = "/chats.ChatService/CheckUserBelongsToChat"
	ChatService_CreatePrivateChat_FullMethodName      = "/chats.ChatService/CreatePrivateChat"
	ChatService_DeleteChat_FullMethodName             = "/chats.ChatService/DeleteChat"
	ChatService_CreateGroupChat_FullMethodName        = "/chats.ChatService/CreateGroupChat"
	ChatService_UpdateGroupChat_FullMethodName        = "/chats.ChatService/UpdateGroupChat"
	ChatService_GetMessagesByChatID_FullMethodName    = "/chats.ChatService/GetMessagesByChatID"
	ChatService_GetPopularChannels_FullMethodName     = "/chats.ChatService/GetPopularChannels"
	ChatService_JoinChannel_FullMethodName            = "/chats.ChatService/JoinChannel"
	ChatService_LeaveChat_FullMethodName              = "/chats.ChatService/LeaveChat"
	ChatService_CreateChannel_FullMethodName          = "/chats.ChatService/CreateChannel"
)

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	GetChatByChatID(ctx context.Context, in *UserAndChatID, opts ...grpc.CallOption) (*Chat, error)
	GetChatsForUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*ChatArray, error)
	CheckUserBelongsToChat(ctx context.Context, in *UserAndChatID, opts ...grpc.CallOption) (*BoolResponse, error)
	CreatePrivateChat(ctx context.Context, in *TwoUserIDs, opts ...grpc.CallOption) (*CreateChatResponse, error)
	DeleteChat(ctx context.Context, in *UserAndChatID, opts ...grpc.CallOption) (*BoolResponse, error)
	CreateGroupChat(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateChatResponse, error)
	UpdateGroupChat(ctx context.Context, in *UpdateGroupChatReq, opts ...grpc.CallOption) (*Empty, error)
	GetMessagesByChatID(ctx context.Context, in *ChatID, opts ...grpc.CallOption) (*MessageArray, error)
	GetPopularChannels(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*ChannelsArray, error)
	JoinChannel(ctx context.Context, in *UserAndChatID, opts ...grpc.CallOption) (*Empty, error)
	LeaveChat(ctx context.Context, in *UserAndChatID, opts ...grpc.CallOption) (*Empty, error)
	CreateChannel(ctx context.Context, in *CreateChannelReq, opts ...grpc.CallOption) (*ChatID, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) GetChatByChatID(ctx context.Context, in *UserAndChatID, opts ...grpc.CallOption) (*Chat, error) {
	out := new(Chat)
	err := c.cc.Invoke(ctx, ChatService_GetChatByChatID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetChatsForUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*ChatArray, error) {
	out := new(ChatArray)
	err := c.cc.Invoke(ctx, ChatService_GetChatsForUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CheckUserBelongsToChat(ctx context.Context, in *UserAndChatID, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, ChatService_CheckUserBelongsToChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreatePrivateChat(ctx context.Context, in *TwoUserIDs, opts ...grpc.CallOption) (*CreateChatResponse, error) {
	out := new(CreateChatResponse)
	err := c.cc.Invoke(ctx, ChatService_CreatePrivateChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteChat(ctx context.Context, in *UserAndChatID, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, ChatService_DeleteChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateGroupChat(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateChatResponse, error) {
	out := new(CreateChatResponse)
	err := c.cc.Invoke(ctx, ChatService_CreateGroupChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdateGroupChat(ctx context.Context, in *UpdateGroupChatReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ChatService_UpdateGroupChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetMessagesByChatID(ctx context.Context, in *ChatID, opts ...grpc.CallOption) (*MessageArray, error) {
	out := new(MessageArray)
	err := c.cc.Invoke(ctx, ChatService_GetMessagesByChatID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetPopularChannels(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*ChannelsArray, error) {
	out := new(ChannelsArray)
	err := c.cc.Invoke(ctx, ChatService_GetPopularChannels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) JoinChannel(ctx context.Context, in *UserAndChatID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ChatService_JoinChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) LeaveChat(ctx context.Context, in *UserAndChatID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ChatService_LeaveChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateChannel(ctx context.Context, in *CreateChannelReq, opts ...grpc.CallOption) (*ChatID, error) {
	out := new(ChatID)
	err := c.cc.Invoke(ctx, ChatService_CreateChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	GetChatByChatID(context.Context, *UserAndChatID) (*Chat, error)
	GetChatsForUser(context.Context, *UserID) (*ChatArray, error)
	CheckUserBelongsToChat(context.Context, *UserAndChatID) (*BoolResponse, error)
	CreatePrivateChat(context.Context, *TwoUserIDs) (*CreateChatResponse, error)
	DeleteChat(context.Context, *UserAndChatID) (*BoolResponse, error)
	CreateGroupChat(context.Context, *CreateGroupReq) (*CreateChatResponse, error)
	UpdateGroupChat(context.Context, *UpdateGroupChatReq) (*Empty, error)
	GetMessagesByChatID(context.Context, *ChatID) (*MessageArray, error)
	GetPopularChannels(context.Context, *UserID) (*ChannelsArray, error)
	JoinChannel(context.Context, *UserAndChatID) (*Empty, error)
	LeaveChat(context.Context, *UserAndChatID) (*Empty, error)
	CreateChannel(context.Context, *CreateChannelReq) (*ChatID, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) GetChatByChatID(context.Context, *UserAndChatID) (*Chat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatByChatID not implemented")
}
func (UnimplementedChatServiceServer) GetChatsForUser(context.Context, *UserID) (*ChatArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatsForUser not implemented")
}
func (UnimplementedChatServiceServer) CheckUserBelongsToChat(context.Context, *UserAndChatID) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserBelongsToChat not implemented")
}
func (UnimplementedChatServiceServer) CreatePrivateChat(context.Context, *TwoUserIDs) (*CreateChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrivateChat not implemented")
}
func (UnimplementedChatServiceServer) DeleteChat(context.Context, *UserAndChatID) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChat not implemented")
}
func (UnimplementedChatServiceServer) CreateGroupChat(context.Context, *CreateGroupReq) (*CreateChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupChat not implemented")
}
func (UnimplementedChatServiceServer) UpdateGroupChat(context.Context, *UpdateGroupChatReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupChat not implemented")
}
func (UnimplementedChatServiceServer) GetMessagesByChatID(context.Context, *ChatID) (*MessageArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessagesByChatID not implemented")
}
func (UnimplementedChatServiceServer) GetPopularChannels(context.Context, *UserID) (*ChannelsArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPopularChannels not implemented")
}
func (UnimplementedChatServiceServer) JoinChannel(context.Context, *UserAndChatID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinChannel not implemented")
}
func (UnimplementedChatServiceServer) LeaveChat(context.Context, *UserAndChatID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveChat not implemented")
}
func (UnimplementedChatServiceServer) CreateChannel(context.Context, *CreateChannelReq) (*ChatID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_GetChatByChatID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAndChatID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetChatByChatID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetChatByChatID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetChatByChatID(ctx, req.(*UserAndChatID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetChatsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetChatsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetChatsForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetChatsForUser(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CheckUserBelongsToChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAndChatID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CheckUserBelongsToChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CheckUserBelongsToChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CheckUserBelongsToChat(ctx, req.(*UserAndChatID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreatePrivateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwoUserIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreatePrivateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CreatePrivateChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreatePrivateChat(ctx, req.(*TwoUserIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAndChatID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_DeleteChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteChat(ctx, req.(*UserAndChatID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateGroupChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateGroupChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CreateGroupChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateGroupChat(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdateGroupChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateGroupChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_UpdateGroupChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateGroupChat(ctx, req.(*UpdateGroupChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetMessagesByChatID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetMessagesByChatID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetMessagesByChatID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetMessagesByChatID(ctx, req.(*ChatID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetPopularChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetPopularChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetPopularChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetPopularChannels(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_JoinChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAndChatID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).JoinChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_JoinChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).JoinChannel(ctx, req.(*UserAndChatID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_LeaveChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAndChatID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).LeaveChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_LeaveChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).LeaveChat(ctx, req.(*UserAndChatID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CreateChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateChannel(ctx, req.(*CreateChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chats.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChatByChatID",
			Handler:    _ChatService_GetChatByChatID_Handler,
		},
		{
			MethodName: "GetChatsForUser",
			Handler:    _ChatService_GetChatsForUser_Handler,
		},
		{
			MethodName: "CheckUserBelongsToChat",
			Handler:    _ChatService_CheckUserBelongsToChat_Handler,
		},
		{
			MethodName: "CreatePrivateChat",
			Handler:    _ChatService_CreatePrivateChat_Handler,
		},
		{
			MethodName: "DeleteChat",
			Handler:    _ChatService_DeleteChat_Handler,
		},
		{
			MethodName: "CreateGroupChat",
			Handler:    _ChatService_CreateGroupChat_Handler,
		},
		{
			MethodName: "UpdateGroupChat",
			Handler:    _ChatService_UpdateGroupChat_Handler,
		},
		{
			MethodName: "GetMessagesByChatID",
			Handler:    _ChatService_GetMessagesByChatID_Handler,
		},
		{
			MethodName: "GetPopularChannels",
			Handler:    _ChatService_GetPopularChannels_Handler,
		},
		{
			MethodName: "JoinChannel",
			Handler:    _ChatService_JoinChannel_Handler,
		},
		{
			MethodName: "LeaveChat",
			Handler:    _ChatService_LeaveChat_Handler,
		},
		{
			MethodName: "CreateChannel",
			Handler:    _ChatService_CreateChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chats.proto",
}
