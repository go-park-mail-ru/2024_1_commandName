// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package delivery

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson194c2cd1DecodeProjectMessengerInternalMessagesDelivery(in *jlexer.Lexer, out *uploadFileDocs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "jsonq":
			(out.Info).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson194c2cd1EncodeProjectMessengerInternalMessagesDelivery(out *jwriter.Writer, in uploadFileDocs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"jsonq\":"
		out.RawString(prefix[1:])
		(in.Info).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v uploadFileDocs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson194c2cd1EncodeProjectMessengerInternalMessagesDelivery(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v uploadFileDocs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson194c2cd1EncodeProjectMessengerInternalMessagesDelivery(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *uploadFileDocs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson194c2cd1DecodeProjectMessengerInternalMessagesDelivery(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *uploadFileDocs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson194c2cd1DecodeProjectMessengerInternalMessagesDelivery(l, v)
}
func easyjson194c2cd1DecodeProjectMessengerInternalMessagesDelivery1(in *jlexer.Lexer, out *requestChatIDBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			out.ChatID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson194c2cd1EncodeProjectMessengerInternalMessagesDelivery1(out *jwriter.Writer, in requestChatIDBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat_id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ChatID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v requestChatIDBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson194c2cd1EncodeProjectMessengerInternalMessagesDelivery1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v requestChatIDBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson194c2cd1EncodeProjectMessengerInternalMessagesDelivery1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *requestChatIDBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson194c2cd1DecodeProjectMessengerInternalMessagesDelivery1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *requestChatIDBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson194c2cd1DecodeProjectMessengerInternalMessagesDelivery1(l, v)
}
func easyjson194c2cd1DecodeProjectMessengerInternalMessagesDelivery2(in *jlexer.Lexer, out *editMessageRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message_id":
			out.MessageID = uint(in.Uint())
		case "new_message_text":
			out.NewMessageText = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson194c2cd1EncodeProjectMessengerInternalMessagesDelivery2(out *jwriter.Writer, in editMessageRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message_id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.MessageID))
	}
	{
		const prefix string = ",\"new_message_text\":"
		out.RawString(prefix)
		out.String(string(in.NewMessageText))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v editMessageRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson194c2cd1EncodeProjectMessengerInternalMessagesDelivery2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v editMessageRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson194c2cd1EncodeProjectMessengerInternalMessagesDelivery2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *editMessageRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson194c2cd1DecodeProjectMessengerInternalMessagesDelivery2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *editMessageRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson194c2cd1DecodeProjectMessengerInternalMessagesDelivery2(l, v)
}
func easyjson194c2cd1DecodeProjectMessengerInternalMessagesDelivery3(in *jlexer.Lexer, out *deleteMessageRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message_id":
			out.MessageID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson194c2cd1EncodeProjectMessengerInternalMessagesDelivery3(out *jwriter.Writer, in deleteMessageRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message_id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.MessageID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v deleteMessageRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson194c2cd1EncodeProjectMessengerInternalMessagesDelivery3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v deleteMessageRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson194c2cd1EncodeProjectMessengerInternalMessagesDelivery3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *deleteMessageRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson194c2cd1DecodeProjectMessengerInternalMessagesDelivery3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *deleteMessageRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson194c2cd1DecodeProjectMessengerInternalMessagesDelivery3(l, v)
}
func easyjson194c2cd1DecodeProjectMessengerInternalMessagesDelivery4(in *jlexer.Lexer, out *MessageHandler) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson194c2cd1EncodeProjectMessengerInternalMessagesDelivery4(out *jwriter.Writer, in MessageHandler) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageHandler) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson194c2cd1EncodeProjectMessengerInternalMessagesDelivery4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageHandler) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson194c2cd1EncodeProjectMessengerInternalMessagesDelivery4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageHandler) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson194c2cd1DecodeProjectMessengerInternalMessagesDelivery4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageHandler) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson194c2cd1DecodeProjectMessengerInternalMessagesDelivery4(l, v)
}
