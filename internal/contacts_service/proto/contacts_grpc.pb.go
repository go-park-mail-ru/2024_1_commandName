// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: contacts.proto

package chats

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Contacts_GetContacts_FullMethodName          = "/chats.Contacts/GetContacts"
	Contacts_AddContactByUsername_FullMethodName = "/chats.Contacts/AddContactByUsername"
	Contacts_AddToAllContacts_FullMethodName     = "/chats.Contacts/AddToAllContacts"
)

// ContactsClient is the client API for Contacts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContactsClient interface {
	GetContacts(ctx context.Context, in *UserIDContacts, opts ...grpc.CallOption) (*PersonArray, error)
	AddContactByUsername(ctx context.Context, in *AddByUsernameReq, opts ...grpc.CallOption) (*EmptyContacts, error)
	AddToAllContacts(ctx context.Context, in *AddToAllReq, opts ...grpc.CallOption) (*BoolResponseContacts, error)
}

type contactsClient struct {
	cc grpc.ClientConnInterface
}

func NewContactsClient(cc grpc.ClientConnInterface) ContactsClient {
	return &contactsClient{cc}
}

func (c *contactsClient) GetContacts(ctx context.Context, in *UserIDContacts, opts ...grpc.CallOption) (*PersonArray, error) {
	out := new(PersonArray)
	err := c.cc.Invoke(ctx, Contacts_GetContacts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) AddContactByUsername(ctx context.Context, in *AddByUsernameReq, opts ...grpc.CallOption) (*EmptyContacts, error) {
	out := new(EmptyContacts)
	err := c.cc.Invoke(ctx, Contacts_AddContactByUsername_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) AddToAllContacts(ctx context.Context, in *AddToAllReq, opts ...grpc.CallOption) (*BoolResponseContacts, error) {
	out := new(BoolResponseContacts)
	err := c.cc.Invoke(ctx, Contacts_AddToAllContacts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactsServer is the server API for Contacts service.
// All implementations must embed UnimplementedContactsServer
// for forward compatibility
type ContactsServer interface {
	GetContacts(context.Context, *UserIDContacts) (*PersonArray, error)
	AddContactByUsername(context.Context, *AddByUsernameReq) (*EmptyContacts, error)
	AddToAllContacts(context.Context, *AddToAllReq) (*BoolResponseContacts, error)
	mustEmbedUnimplementedContactsServer()
}

// UnimplementedContactsServer must be embedded to have forward compatible implementations.
type UnimplementedContactsServer struct {
}

func (UnimplementedContactsServer) GetContacts(context.Context, *UserIDContacts) (*PersonArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContacts not implemented")
}
func (UnimplementedContactsServer) AddContactByUsername(context.Context, *AddByUsernameReq) (*EmptyContacts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContactByUsername not implemented")
}
func (UnimplementedContactsServer) AddToAllContacts(context.Context, *AddToAllReq) (*BoolResponseContacts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToAllContacts not implemented")
}
func (UnimplementedContactsServer) mustEmbedUnimplementedContactsServer() {}

// UnsafeContactsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContactsServer will
// result in compilation errors.
type UnsafeContactsServer interface {
	mustEmbedUnimplementedContactsServer()
}

func RegisterContactsServer(s grpc.ServiceRegistrar, srv ContactsServer) {
	s.RegisterService(&Contacts_ServiceDesc, srv)
}

func _Contacts_GetContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDContacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).GetContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Contacts_GetContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).GetContacts(ctx, req.(*UserIDContacts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_AddContactByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddByUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).AddContactByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Contacts_AddContactByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).AddContactByUsername(ctx, req.(*AddByUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_AddToAllContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).AddToAllContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Contacts_AddToAllContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).AddToAllContacts(ctx, req.(*AddToAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Contacts_ServiceDesc is the grpc.ServiceDesc for Contacts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Contacts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chats.Contacts",
	HandlerType: (*ContactsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContacts",
			Handler:    _Contacts_GetContacts_Handler,
		},
		{
			MethodName: "AddContactByUsername",
			Handler:    _Contacts_AddContactByUsername_Handler,
		},
		{
			MethodName: "AddToAllContacts",
			Handler:    _Contacts_AddToAllContacts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contacts.proto",
}
